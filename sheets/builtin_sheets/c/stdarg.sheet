#
|c|C|
|va_list|
|variadic|arguments|stdarg|stdarg.h|
    type that can hold a list of arguments passed to a 
    variadic argument function, i.e. func(...)
    ~ included in <stdarg.h>
    example: 
      void func(int num_args, ...)
      {
        va_list list;

        va_start(list, num_args);
        for (int i = 0; i < num_args; ++i)
        {
          int arg = va_arg(list, int);
          printf("arg: %d\n", arg);
        }
        va_end(list);
      }

?< https://www.tutorialspoint.com/c_standard_library/stdarg_h.htm >?
#
|c|C|
|va_start|
|variadic|arguments|stdarg|stdarg.h|
void va_start(va_list list, int num_args)
    initialize a va_arg type to be used with va_arg() 
    to get variadic arguments of the stack
    ~ actually a macro not func
    ~ included in <stdarg.h>
    example: 
      void func(int num_args, ...)
      {
        va_list list;

        va_start(list, num_args);
        for (int i = 0; i < num_args; ++i)
        {
          int arg = va_arg(list, int);
          printf("arg: %d\n", arg);
        }
        va_end(list);
      }

?< https://www.tutorialspoint.com/c_standard_library/c_function_va_start.htm >?
#
|c|C|
|va_arg|va_args|
|variadic|arguments|stdarg|stdarg.h|
type va_arg(va_list list, type)
    get variadic argument of the stack
    ~ actually a macro not func
    ~ included in <stdarg.h>
    example: 
      void func(int num_args, ...)
      {
        va_list list;

        va_start(list, num_args);
        for (int i = 0; i < num_args; ++i)
        {
          int arg = va_arg(list, int);
          printf("arg: %d\n", arg);
        }
        va_end(list);
      }

?< https://www.tutorialspoint.com/c_standard_library/c_function_va_arg.htm >?
#
#
|c|C|
|va_end|
|variadic|arguments|stdarg|stdarg.h|
void va_end(va_list list)
    after a call to va_start(), va_end needs to be
    called for the function to abled to return
    ! if not called after va_start(), behaviour
    ! is undefined
    ~ actually a macro not func
    ~ included in <stdarg.h>
    example: 
      void func(int num_args, ...)
      {
        va_list list;

        va_start(list, num_args);
        for (int i = 0; i < num_args; ++i)
        {
          int arg = va_arg(list, int);
          printf("arg: %d\n", arg);
        }
        va_end(list);
      }

?< https://www.tutorialspoint.com/c_standard_library/c_function_va_end.htm >?
#



